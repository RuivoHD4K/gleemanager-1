{"ast":null,"code":"var _jsxFileName = \"C:\\\\projeto\\\\gleemanager-1\\\\frontend\\\\src\\\\pages\\\\UserManagement\\\\UserManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./UserManagement.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserManagement = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [notification, setNotification] = useState(null);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [formData, setFormData] = useState({\n    email: \"\",\n    username: \"\",\n    role: \"user\"\n  });\n\n  // Modals state\n  const [showPasswordModal, setShowPasswordModal] = useState(false);\n  const [showPasswordConfirmation, setShowPasswordConfirmation] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [showAddUserModal, setShowAddUserModal] = useState(false);\n\n  // Confirmation inputs\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [adminPassword, setAdminPassword] = useState(\"\");\n  const [deleteConfirmation, setDeleteConfirmation] = useState(\"\");\n\n  // New user data\n  const [newUserData, setNewUserData] = useState({\n    email: \"\",\n    username: \"\",\n    password: \"\",\n    role: \"user\"\n  });\n  const navigate = useNavigate();\n  const currentUserEmail = localStorage.getItem(\"userEmail\");\n\n  // Fetch users on component mount\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  // Update form data when a user is selected\n  useEffect(() => {\n    if (selectedUser) {\n      setFormData({\n        email: selectedUser.email,\n        username: selectedUser.username || \"\",\n        role: selectedUser.role || \"user\"\n      });\n    }\n  }, [selectedUser]);\n  const fetchUsers = async () => {\n    try {\n      const token = localStorage.getItem(\"authToken\");\n      const response = await fetch(\"http://localhost:5000/users\", {\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          localStorage.removeItem(\"authToken\");\n          localStorage.removeItem(\"isAuthenticated\");\n          navigate(\"/login\");\n          throw new Error(\"Your session has expired. Please log in again.\");\n        }\n        throw new Error(\"Failed to fetch users\");\n      }\n      const data = await response.json();\n      setUsers(data);\n\n      // Select first user by default if available\n      if (data.length > 0 && !selectedUser) {\n        setSelectedUser(data[0]);\n      }\n    } catch (err) {\n      showNotification(err.message, \"error\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleNewUserInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewUserData({\n      ...newUserData,\n      [name]: value\n    });\n  };\n  const handleUserSelect = user => {\n    setSelectedUser(user);\n  };\n  const generateRandomPassword = () => {\n    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*\";\n    let password = \"\";\n    for (let i = 0; i < 10; i++) {\n      password += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return password;\n  };\n\n  // Open password reset confirmation modal\n  const confirmPasswordReset = () => {\n    if (!selectedUser) return;\n\n    // Reset the admin password field\n    setAdminPassword(\"\");\n\n    // Show the confirmation modal\n    setShowPasswordConfirmation(true);\n  };\n\n  // Handle actual password reset after confirmation\n  const handleGeneratePassword = async () => {\n    if (!selectedUser) return;\n\n    // Validate admin password\n    if (!adminPassword) {\n      showNotification(\"Please enter your password to confirm this action\", \"error\");\n      return;\n    }\n    try {\n      // Verify admin password\n      const verifyResponse = await fetch(\"http://localhost:5000/authenticate\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: currentUserEmail,\n          password: adminPassword\n        })\n      });\n      const verifyData = await verifyResponse.json();\n      if (!verifyResponse.ok || !verifyData.authenticated) {\n        showNotification(\"Incorrect password\", \"error\");\n        return;\n      }\n\n      // Password verified, proceed with reset\n      const newPass = generateRandomPassword();\n      setNewPassword(newPass);\n      const token = localStorage.getItem(\"authToken\");\n      const response = await fetch(`http://localhost:5000/users/${selectedUser.userId}/password`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          password: newPass\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to update password\");\n      }\n\n      // Close confirmation modal\n      setShowPasswordConfirmation(false);\n\n      // Update user list to reflect the change\n      const updatedUser = {\n        ...selectedUser,\n        mustChangePassword: true\n      };\n      setUsers(users.map(user => user.userId === selectedUser.userId ? updatedUser : user));\n      setSelectedUser(updatedUser);\n\n      // Show the new password modal\n      setShowPasswordModal(true);\n\n      // Clear admin password\n      setAdminPassword(\"\");\n    } catch (err) {\n      showNotification(\"Failed to update password: \" + err.message, \"error\");\n    }\n  };\n\n  // Open delete user confirmation modal\n  const confirmDeleteUser = () => {\n    if (!selectedUser) return;\n\n    // Reset the admin password field\n    setAdminPassword(\"\");\n    setDeleteConfirmation(\"\");\n\n    // Show the confirmation modal\n    setShowDeleteConfirmation(true);\n  };\n\n  // Handle actual user deletion after confirmation\n  const handleDeleteUser = async () => {\n    if (!selectedUser) return;\n\n    // Validate admin password\n    if (!adminPassword) {\n      showNotification(\"Please enter your password to confirm this action\", \"error\");\n      return;\n    }\n\n    // Validate delete confirmation\n    if (deleteConfirmation !== selectedUser.email) {\n      showNotification(\"Email confirmation does not match\", \"error\");\n      return;\n    }\n    try {\n      // Verify admin password\n      const verifyResponse = await fetch(\"http://localhost:5000/authenticate\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: currentUserEmail,\n          password: adminPassword\n        })\n      });\n      const verifyData = await verifyResponse.json();\n      if (!verifyResponse.ok || !verifyData.authenticated) {\n        showNotification(\"Incorrect password\", \"error\");\n        return;\n      }\n\n      // Password verified, proceed with deletion\n      const token = localStorage.getItem(\"authToken\");\n      const response = await fetch(`http://localhost:5000/users/${selectedUser.userId}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to delete user\");\n      }\n\n      // Remove the user from the local state\n      const updatedUsers = users.filter(user => user.userId !== selectedUser.userId);\n      setUsers(updatedUsers);\n\n      // Select a new user if available\n      if (updatedUsers.length > 0) {\n        setSelectedUser(updatedUsers[0]);\n      } else {\n        setSelectedUser(null);\n      }\n\n      // Close confirmation modal\n      setShowDeleteConfirmation(false);\n\n      // Show success notification\n      showNotification(`User ${selectedUser.email} has been deleted`, \"success\");\n\n      // Clear fields\n      setAdminPassword(\"\");\n      setDeleteConfirmation(\"\");\n    } catch (err) {\n      showNotification(\"Failed to delete user: \" + err.message, \"error\");\n    }\n  };\n  const handleCreateNewUser = () => {\n    // Reset form data\n    setNewUserData({\n      email: \"\",\n      username: \"\",\n      password: generateRandomPassword(),\n      // Generate a random initial password\n      role: \"user\"\n    });\n    setShowAddUserModal(true);\n  };\n  const handleAddNewUser = async e => {\n    e.preventDefault();\n\n    // Basic validation\n    if (!newUserData.email || !newUserData.password || !newUserData.username) {\n      showNotification(\"All fields are required\", \"error\");\n      return;\n    }\n    if (newUserData.password.length < 8) {\n      showNotification(\"Password must be at least 8 characters long\", \"error\");\n      return;\n    }\n    try {\n      const token = localStorage.getItem(\"authToken\");\n      const response = await fetch(\"http://localhost:5000/users\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          email: newUserData.email,\n          password: newUserData.password,\n          username: newUserData.username,\n          role: newUserData.role,\n          createdAt: new Date().toISOString(),\n          mustChangePassword: true // New users must change password on first login\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to create user\");\n      }\n      const result = await response.json();\n\n      // Add new user to state\n      const newUser = result.user;\n      setUsers([...users, {\n        ...newUser,\n        mustChangePassword: true\n      }]);\n\n      // Select newly created user\n      setSelectedUser({\n        ...newUser,\n        mustChangePassword: true\n      });\n      setShowAddUserModal(false);\n      showNotification(`User ${newUserData.email} created successfully!`, \"success\");\n\n      // Refresh user list\n      fetchUsers();\n    } catch (err) {\n      showNotification(\"Failed to create user: \" + err.message, \"error\");\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!selectedUser) return;\n    try {\n      const token = localStorage.getItem(\"authToken\");\n      const response = await fetch(`http://localhost:5000/users/${selectedUser.userId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          ...formData,\n          // Preserve the mustChangePassword flag\n          mustChangePassword: selectedUser.mustChangePassword\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to update user\");\n      }\n\n      // Refresh user list to show updated data\n      fetchUsers();\n\n      // Update local storage if the current user was updated\n      const currentUserId = localStorage.getItem(\"userId\");\n      if (currentUserId === selectedUser.userId) {\n        localStorage.setItem(\"username\", formData.username || formData.email.split('@')[0]);\n      }\n\n      // Show success message\n      showNotification(\"User updated successfully!\", \"success\");\n    } catch (err) {\n      showNotification(\"Failed to update user: \" + err.message, \"error\");\n    }\n  };\n  const showNotification = (message, type = \"info\") => {\n    setNotification({\n      message,\n      type\n    });\n\n    // Auto-clear notification after 5 seconds\n    setTimeout(() => {\n      setNotification(null);\n    }, 5000);\n  };\n\n  // Helper function to check if the selected user is the currently logged in admin\n  const isCurrentUser = () => {\n    if (!selectedUser) return false;\n    const currentUserId = localStorage.getItem(\"userId\");\n    return selectedUser.userId === currentUserId;\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-indicator\",\n    children: \"Loading users...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 405,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-management-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"User Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-btn\",\n          onClick: handleCreateNewUser,\n          children: \"+ New User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }, this), notification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `notification ${notification.type}`,\n      children: notification.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-management-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-card users-list-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"users-list-container\",\n          children: users.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No users found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"users-select-list\",\n            children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n              onClick: () => handleUserSelect(user),\n              className: selectedUser && selectedUser.userId === user.userId ? \"selected\" : \"\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-list-item\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"user-info\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"user-email\",\n                    children: user.email\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 441,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"user-role\",\n                    children: user.role || \"user\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 442,\n                    columnNumber: 25\n                  }, this), user.mustChangePassword && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"password-status\",\n                    children: \"Password change required\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 444,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 440,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 21\n              }, this)\n            }, user.userId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-card user-edit-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Edit User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 11\n        }, this), selectedUser ? /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          className: \"user-edit-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"username\",\n              children: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"username\",\n              name: \"username\",\n              value: formData.username,\n              onChange: handleInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"email\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              id: \"email\",\n              name: \"email\",\n              value: formData.email,\n              onChange: handleInputChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"role\",\n              children: \"Role\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"role\",\n              name: \"role\",\n              value: formData.role,\n              onChange: handleInputChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"user\",\n                children: \"User\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 491,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"admin\",\n                children: \"Admin\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 492,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"password-status-display\",\n            children: selectedUser.mustChangePassword ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"password-change-required\",\n              children: \"Password change required on next login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 498,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"password-status-ok\",\n              children: \"Password status: OK\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"action-btn save-btn\",\n              children: \"Save Changes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"action-btn password-btn\",\n              onClick: confirmPasswordReset,\n              children: \"Reset Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 512,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"action-btn delete-btn\",\n              onClick: confirmDeleteUser,\n              disabled: isCurrentUser() // Can't delete yourself\n              ,\n              title: isCurrentUser() ? \"Cannot delete your own account\" : \"Delete user\",\n              children: \"Delete User\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 519,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 15\n          }, this), isCurrentUser() && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"self-delete-warning\",\n            children: \"You cannot delete your own account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select a user to edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }, this), showPasswordConfirmation && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-backdrop\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Confirm Password Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"You are about to reset the password for \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: selectedUser.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 55\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"The user will be required to change this password on their next login.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"admin-password\",\n            children: \"Enter your password to confirm:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"admin-password\",\n            value: adminPassword,\n            onChange: e => setAdminPassword(e.target.value),\n            placeholder: \"Your password\",\n            autoFocus: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleGeneratePassword,\n            className: \"action-btn\",\n            disabled: !adminPassword,\n            children: \"Reset Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setShowPasswordConfirmation(false);\n              setAdminPassword(\"\");\n            },\n            className: \"secondary-btn\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 9\n    }, this), showPasswordModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-backdrop\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"New Password Generated\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"A new password has been generated for \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: selectedUser.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 53\n          }, this), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"password-display\",\n          children: newPassword\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"modal-note\",\n          children: \"Please copy this password now. You won't be able to view it again.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"modal-note\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Note:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 15\n          }, this), \" The user will be required to change this password on next login.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-btn\",\n          onClick: () => setShowPasswordModal(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 9\n    }, this), showDeleteConfirmation && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-backdrop\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Delete User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"You are about to permanently delete the user \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: selectedUser.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 619,\n            columnNumber: 60\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"warning-text\",\n          children: \"This action cannot be undone!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"delete-confirmation\",\n            children: \"Type user's email to confirm:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"delete-confirmation\",\n            value: deleteConfirmation,\n            onChange: e => setDeleteConfirmation(e.target.value),\n            placeholder: selectedUser.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"admin-password-delete\",\n            children: \"Enter your password to confirm:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"admin-password-delete\",\n            value: adminPassword,\n            onChange: e => setAdminPassword(e.target.value),\n            placeholder: \"Your password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleDeleteUser,\n            className: \"delete-btn\",\n            disabled: !adminPassword || deleteConfirmation !== selectedUser.email,\n            children: \"Delete User\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 645,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setShowDeleteConfirmation(false);\n              setAdminPassword(\"\");\n              setDeleteConfirmation(\"\");\n            },\n            className: \"secondary-btn\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 9\n    }, this), showAddUserModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-backdrop\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Add New User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleAddNewUser,\n          className: \"user-edit-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"new-email\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 674,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              id: \"new-email\",\n              name: \"email\",\n              value: newUserData.email,\n              onChange: handleNewUserInputChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 675,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 673,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"new-username\",\n              children: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 686,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"new-username\",\n              name: \"username\",\n              value: newUserData.username,\n              onChange: handleNewUserInputChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 685,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"new-password\",\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 698,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\" // Text to make it visible\n              ,\n              id: \"new-password\",\n              name: \"password\",\n              value: newUserData.password,\n              onChange: handleNewUserInputChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 699,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"form-help\",\n              children: \"Password must be at least 8 characters long. The user will be required to change this password on first login.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 707,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"new-role\",\n              children: \"Role\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 714,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"new-role\",\n              name: \"role\",\n              value: newUserData.role,\n              onChange: handleNewUserInputChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"user\",\n                children: \"User\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 721,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"admin\",\n                children: \"Admin\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 722,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 715,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 713,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"action-btn save-btn\",\n              children: \"Create User\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 727,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"action-btn password-btn\",\n              onClick: () => setShowAddUserModal(false),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 730,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 726,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 669,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 408,\n    columnNumber: 5\n  }, this);\n};\n_s(UserManagement, \"YaeDh1qni8inOJLXbzumKj5ll9I=\", false, function () {\n  return [useNavigate];\n});\n_c = UserManagement;\nexport default UserManagement;\nvar _c;\n$RefreshReg$(_c, \"UserManagement\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","UserManagement","_s","users","setUsers","loading","setLoading","notification","setNotification","selectedUser","setSelectedUser","formData","setFormData","email","username","role","showPasswordModal","setShowPasswordModal","showPasswordConfirmation","setShowPasswordConfirmation","showDeleteConfirmation","setShowDeleteConfirmation","showAddUserModal","setShowAddUserModal","newPassword","setNewPassword","adminPassword","setAdminPassword","deleteConfirmation","setDeleteConfirmation","newUserData","setNewUserData","password","navigate","currentUserEmail","localStorage","getItem","fetchUsers","token","response","fetch","headers","ok","status","removeItem","Error","data","json","length","err","showNotification","message","handleInputChange","e","name","value","target","handleNewUserInputChange","handleUserSelect","user","generateRandomPassword","chars","i","charAt","Math","floor","random","confirmPasswordReset","handleGeneratePassword","verifyResponse","method","body","JSON","stringify","verifyData","authenticated","newPass","userId","updatedUser","mustChangePassword","map","confirmDeleteUser","handleDeleteUser","updatedUsers","filter","handleCreateNewUser","handleAddNewUser","preventDefault","createdAt","Date","toISOString","result","newUser","handleSubmit","currentUserId","setItem","split","type","setTimeout","isCurrentUser","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","htmlFor","id","onChange","required","disabled","title","placeholder","autoFocus","_c","$RefreshReg$"],"sources":["C:/projeto/gleemanager-1/frontend/src/pages/UserManagement/UserManagement.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./UserManagement.css\";\r\n\r\nconst UserManagement = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [notification, setNotification] = useState(null);\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n  const [formData, setFormData] = useState({\r\n    email: \"\",\r\n    username: \"\",\r\n    role: \"user\"\r\n  });\r\n  \r\n  // Modals state\r\n  const [showPasswordModal, setShowPasswordModal] = useState(false);\r\n  const [showPasswordConfirmation, setShowPasswordConfirmation] = useState(false);\r\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\r\n  const [showAddUserModal, setShowAddUserModal] = useState(false);\r\n  \r\n  // Confirmation inputs\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [adminPassword, setAdminPassword] = useState(\"\");\r\n  const [deleteConfirmation, setDeleteConfirmation] = useState(\"\");\r\n  \r\n  // New user data\r\n  const [newUserData, setNewUserData] = useState({\r\n    email: \"\",\r\n    username: \"\",\r\n    password: \"\",\r\n    role: \"user\"\r\n  });\r\n  \r\n  const navigate = useNavigate();\r\n  const currentUserEmail = localStorage.getItem(\"userEmail\");\r\n\r\n  // Fetch users on component mount\r\n  useEffect(() => {\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  // Update form data when a user is selected\r\n  useEffect(() => {\r\n    if (selectedUser) {\r\n      setFormData({\r\n        email: selectedUser.email,\r\n        username: selectedUser.username || \"\",\r\n        role: selectedUser.role || \"user\"\r\n      });\r\n    }\r\n  }, [selectedUser]);\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      const token = localStorage.getItem(\"authToken\");\r\n      const response = await fetch(\"http://localhost:5000/users\", {\r\n        headers: {\r\n          \"Authorization\": `Bearer ${token}`\r\n        }\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        if (response.status === 401) {\r\n          localStorage.removeItem(\"authToken\");\r\n          localStorage.removeItem(\"isAuthenticated\");\r\n          navigate(\"/login\");\r\n          throw new Error(\"Your session has expired. Please log in again.\");\r\n        }\r\n        throw new Error(\"Failed to fetch users\");\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setUsers(data);\r\n      \r\n      // Select first user by default if available\r\n      if (data.length > 0 && !selectedUser) {\r\n        setSelectedUser(data[0]);\r\n      }\r\n    } catch (err) {\r\n      showNotification(err.message, \"error\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  const handleNewUserInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setNewUserData({\r\n      ...newUserData,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  const handleUserSelect = (user) => {\r\n    setSelectedUser(user);\r\n  };\r\n\r\n  const generateRandomPassword = () => {\r\n    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*\";\r\n    let password = \"\";\r\n    for (let i = 0; i < 10; i++) {\r\n      password += chars.charAt(Math.floor(Math.random() * chars.length));\r\n    }\r\n    return password;\r\n  };\r\n\r\n  // Open password reset confirmation modal\r\n  const confirmPasswordReset = () => {\r\n    if (!selectedUser) return;\r\n    \r\n    // Reset the admin password field\r\n    setAdminPassword(\"\");\r\n    \r\n    // Show the confirmation modal\r\n    setShowPasswordConfirmation(true);\r\n  };\r\n  \r\n  // Handle actual password reset after confirmation\r\n  const handleGeneratePassword = async () => {\r\n    if (!selectedUser) return;\r\n    \r\n    // Validate admin password\r\n    if (!adminPassword) {\r\n      showNotification(\"Please enter your password to confirm this action\", \"error\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      // Verify admin password\r\n      const verifyResponse = await fetch(\"http://localhost:5000/authenticate\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ \r\n          email: currentUserEmail, \r\n          password: adminPassword \r\n        }),\r\n      });\r\n      \r\n      const verifyData = await verifyResponse.json();\r\n      \r\n      if (!verifyResponse.ok || !verifyData.authenticated) {\r\n        showNotification(\"Incorrect password\", \"error\");\r\n        return;\r\n      }\r\n      \r\n      // Password verified, proceed with reset\r\n      const newPass = generateRandomPassword();\r\n      setNewPassword(newPass);\r\n      \r\n      const token = localStorage.getItem(\"authToken\");\r\n      const response = await fetch(`http://localhost:5000/users/${selectedUser.userId}/password`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({ password: newPass })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to update password\");\r\n      }\r\n      \r\n      // Close confirmation modal\r\n      setShowPasswordConfirmation(false);\r\n      \r\n      // Update user list to reflect the change\r\n      const updatedUser = {...selectedUser, mustChangePassword: true};\r\n      setUsers(users.map(user => \r\n        user.userId === selectedUser.userId ? updatedUser : user\r\n      ));\r\n      setSelectedUser(updatedUser);\r\n      \r\n      // Show the new password modal\r\n      setShowPasswordModal(true);\r\n      \r\n      // Clear admin password\r\n      setAdminPassword(\"\");\r\n      \r\n    } catch (err) {\r\n      showNotification(\"Failed to update password: \" + err.message, \"error\");\r\n    }\r\n  };\r\n\r\n  // Open delete user confirmation modal\r\n  const confirmDeleteUser = () => {\r\n    if (!selectedUser) return;\r\n    \r\n    // Reset the admin password field\r\n    setAdminPassword(\"\");\r\n    setDeleteConfirmation(\"\");\r\n    \r\n    // Show the confirmation modal\r\n    setShowDeleteConfirmation(true);\r\n  };\r\n  \r\n  // Handle actual user deletion after confirmation\r\n  const handleDeleteUser = async () => {\r\n    if (!selectedUser) return;\r\n    \r\n    // Validate admin password\r\n    if (!adminPassword) {\r\n      showNotification(\"Please enter your password to confirm this action\", \"error\");\r\n      return;\r\n    }\r\n    \r\n    // Validate delete confirmation\r\n    if (deleteConfirmation !== selectedUser.email) {\r\n      showNotification(\"Email confirmation does not match\", \"error\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      // Verify admin password\r\n      const verifyResponse = await fetch(\"http://localhost:5000/authenticate\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ \r\n          email: currentUserEmail, \r\n          password: adminPassword \r\n        }),\r\n      });\r\n      \r\n      const verifyData = await verifyResponse.json();\r\n      \r\n      if (!verifyResponse.ok || !verifyData.authenticated) {\r\n        showNotification(\"Incorrect password\", \"error\");\r\n        return;\r\n      }\r\n      \r\n      // Password verified, proceed with deletion\r\n      const token = localStorage.getItem(\"authToken\");\r\n      const response = await fetch(`http://localhost:5000/users/${selectedUser.userId}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Authorization\": `Bearer ${token}`\r\n        }\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to delete user\");\r\n      }\r\n      \r\n      // Remove the user from the local state\r\n      const updatedUsers = users.filter(user => user.userId !== selectedUser.userId);\r\n      setUsers(updatedUsers);\r\n      \r\n      // Select a new user if available\r\n      if (updatedUsers.length > 0) {\r\n        setSelectedUser(updatedUsers[0]);\r\n      } else {\r\n        setSelectedUser(null);\r\n      }\r\n      \r\n      // Close confirmation modal\r\n      setShowDeleteConfirmation(false);\r\n      \r\n      // Show success notification\r\n      showNotification(`User ${selectedUser.email} has been deleted`, \"success\");\r\n      \r\n      // Clear fields\r\n      setAdminPassword(\"\");\r\n      setDeleteConfirmation(\"\");\r\n      \r\n    } catch (err) {\r\n      showNotification(\"Failed to delete user: \" + err.message, \"error\");\r\n    }\r\n  };\r\n\r\n  const handleCreateNewUser = () => {\r\n    // Reset form data\r\n    setNewUserData({\r\n      email: \"\",\r\n      username: \"\",\r\n      password: generateRandomPassword(), // Generate a random initial password\r\n      role: \"user\"\r\n    });\r\n    setShowAddUserModal(true);\r\n  };\r\n\r\n  const handleAddNewUser = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    // Basic validation\r\n    if (!newUserData.email || !newUserData.password || !newUserData.username) {\r\n      showNotification(\"All fields are required\", \"error\");\r\n      return;\r\n    }\r\n    \r\n    if (newUserData.password.length < 8) {\r\n      showNotification(\"Password must be at least 8 characters long\", \"error\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const token = localStorage.getItem(\"authToken\");\r\n      const response = await fetch(\"http://localhost:5000/users\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({\r\n          email: newUserData.email,\r\n          password: newUserData.password,\r\n          username: newUserData.username,\r\n          role: newUserData.role,\r\n          createdAt: new Date().toISOString(),\r\n          mustChangePassword: true // New users must change password on first login\r\n        })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to create user\");\r\n      }\r\n      \r\n      const result = await response.json();\r\n      \r\n      // Add new user to state\r\n      const newUser = result.user;\r\n      setUsers([...users, {...newUser, mustChangePassword: true}]);\r\n      \r\n      // Select newly created user\r\n      setSelectedUser({...newUser, mustChangePassword: true});\r\n      \r\n      setShowAddUserModal(false);\r\n      showNotification(`User ${newUserData.email} created successfully!`, \"success\");\r\n      \r\n      // Refresh user list\r\n      fetchUsers();\r\n    } catch (err) {\r\n      showNotification(\"Failed to create user: \" + err.message, \"error\");\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!selectedUser) return;\r\n    \r\n    try {\r\n      const token = localStorage.getItem(\"authToken\");\r\n      const response = await fetch(`http://localhost:5000/users/${selectedUser.userId}`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({\r\n          ...formData,\r\n          // Preserve the mustChangePassword flag\r\n          mustChangePassword: selectedUser.mustChangePassword\r\n        })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to update user\");\r\n      }\r\n      \r\n      // Refresh user list to show updated data\r\n      fetchUsers();\r\n      \r\n      // Update local storage if the current user was updated\r\n      const currentUserId = localStorage.getItem(\"userId\");\r\n      if (currentUserId === selectedUser.userId) {\r\n        localStorage.setItem(\"username\", formData.username || formData.email.split('@')[0]);\r\n      }\r\n      \r\n      // Show success message\r\n      showNotification(\"User updated successfully!\", \"success\");\r\n    } catch (err) {\r\n      showNotification(\"Failed to update user: \" + err.message, \"error\");\r\n    }\r\n  };\r\n\r\n  const showNotification = (message, type = \"info\") => {\r\n    setNotification({ message, type });\r\n    \r\n    // Auto-clear notification after 5 seconds\r\n    setTimeout(() => {\r\n      setNotification(null);\r\n    }, 5000);\r\n  };\r\n\r\n  // Helper function to check if the selected user is the currently logged in admin\r\n  const isCurrentUser = () => {\r\n    if (!selectedUser) return false;\r\n    const currentUserId = localStorage.getItem(\"userId\");\r\n    return selectedUser.userId === currentUserId;\r\n  };\r\n\r\n  if (loading) return <div className=\"loading-indicator\">Loading users...</div>;\r\n\r\n  return (\r\n    <div className=\"user-management-container\">\r\n      <div className=\"page-header\">\r\n        <h1>User Management</h1>\r\n        <div className=\"page-actions\">\r\n          <button className=\"action-btn\" onClick={handleCreateNewUser}>\r\n            + New User\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      {notification && (\r\n        <div className={`notification ${notification.type}`}>\r\n          {notification.message}\r\n        </div>\r\n      )}\r\n      \r\n      <div className=\"user-management-grid\">\r\n        {/* Users list card */}\r\n        <div className=\"dashboard-card users-list-card\">\r\n          <h3>Users</h3>\r\n          <div className=\"users-list-container\">\r\n            {users.length === 0 ? (\r\n              <p>No users found</p>\r\n            ) : (\r\n              <ul className=\"users-select-list\">\r\n                {users.map((user) => (\r\n                  <li \r\n                    key={user.userId} \r\n                    onClick={() => handleUserSelect(user)}\r\n                    className={selectedUser && selectedUser.userId === user.userId ? \"selected\" : \"\"}\r\n                  >\r\n                    <div className=\"user-list-item\">\r\n                      <div className=\"user-info\">\r\n                        <span className=\"user-email\">{user.email}</span>\r\n                        <span className=\"user-role\">{user.role || \"user\"}</span>\r\n                        {user.mustChangePassword && (\r\n                          <span className=\"password-status\">Password change required</span>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            )}\r\n          </div>\r\n        </div>\r\n        \r\n        {/* User edit form card */}\r\n        <div className=\"dashboard-card user-edit-card\">\r\n          <h3>Edit User</h3>\r\n          {selectedUser ? (\r\n            <form onSubmit={handleSubmit} className=\"user-edit-form\">\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"username\">Username</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"username\"\r\n                  name=\"username\"\r\n                  value={formData.username}\r\n                  onChange={handleInputChange}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"email\">Email</label>\r\n                <input\r\n                  type=\"email\"\r\n                  id=\"email\"\r\n                  name=\"email\"\r\n                  value={formData.email}\r\n                  onChange={handleInputChange}\r\n                  required\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"role\">Role</label>\r\n                <select\r\n                  id=\"role\"\r\n                  name=\"role\"\r\n                  value={formData.role}\r\n                  onChange={handleInputChange}\r\n                >\r\n                  <option value=\"user\">User</option>\r\n                  <option value=\"admin\">Admin</option>\r\n                </select>\r\n              </div>\r\n              \r\n              <div className=\"password-status-display\">\r\n                {selectedUser.mustChangePassword ? (\r\n                  <div className=\"password-change-required\">\r\n                    Password change required on next login\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"password-status-ok\">\r\n                    Password status: OK\r\n                  </div>\r\n                )}\r\n              </div>\r\n              \r\n              <div className=\"form-actions\">\r\n                <button type=\"submit\" className=\"action-btn save-btn\">\r\n                  Save Changes\r\n                </button>\r\n                <button \r\n                  type=\"button\" \r\n                  className=\"action-btn password-btn\"\r\n                  onClick={confirmPasswordReset}\r\n                >\r\n                  Reset Password\r\n                </button>\r\n                <button \r\n                  type=\"button\" \r\n                  className=\"action-btn delete-btn\"\r\n                  onClick={confirmDeleteUser}\r\n                  disabled={isCurrentUser()} // Can't delete yourself\r\n                  title={isCurrentUser() ? \"Cannot delete your own account\" : \"Delete user\"}\r\n                >\r\n                  Delete User\r\n                </button>\r\n              </div>\r\n              \r\n              {isCurrentUser() && (\r\n                <div className=\"self-delete-warning\">\r\n                  You cannot delete your own account\r\n                </div>\r\n              )}\r\n            </form>\r\n          ) : (\r\n            <p>Select a user to edit</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Password reset confirmation modal */}\r\n      {showPasswordConfirmation && (\r\n        <div className=\"modal-backdrop\">\r\n          <div className=\"modal-content\">\r\n            <h3>Confirm Password Reset</h3>\r\n            <p>\r\n              You are about to reset the password for <strong>{selectedUser.email}</strong>.\r\n            </p>\r\n            <p>\r\n              The user will be required to change this password on their next login.\r\n            </p>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"admin-password\">Enter your password to confirm:</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"admin-password\"\r\n                value={adminPassword}\r\n                onChange={(e) => setAdminPassword(e.target.value)}\r\n                placeholder=\"Your password\"\r\n                autoFocus\r\n              />\r\n            </div>\r\n            <div className=\"modal-actions\">\r\n              <button \r\n                onClick={handleGeneratePassword}\r\n                className=\"action-btn\"\r\n                disabled={!adminPassword}\r\n              >\r\n                Reset Password\r\n              </button>\r\n              <button \r\n                onClick={() => {\r\n                  setShowPasswordConfirmation(false);\r\n                  setAdminPassword(\"\");\r\n                }}\r\n                className=\"secondary-btn\"\r\n              >\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Password display modal */}\r\n      {showPasswordModal && (\r\n        <div className=\"modal-backdrop\">\r\n          <div className=\"modal-content\">\r\n            <h3>New Password Generated</h3>\r\n            <p>\r\n              A new password has been generated for <strong>{selectedUser.email}</strong>:\r\n            </p>\r\n            <div className=\"password-display\">\r\n              {newPassword}\r\n            </div>\r\n            <p className=\"modal-note\">\r\n              Please copy this password now. You won't be able to view it again.\r\n            </p>\r\n            <p className=\"modal-note\">\r\n              <strong>Note:</strong> The user will be required to change this password on next login.\r\n            </p>\r\n            <button \r\n              className=\"action-btn\"\r\n              onClick={() => setShowPasswordModal(false)}\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Delete user confirmation modal */}\r\n      {showDeleteConfirmation && (\r\n        <div className=\"modal-backdrop\">\r\n          <div className=\"modal-content\">\r\n            <h3>Delete User</h3>\r\n            <p>\r\n              You are about to permanently delete the user <strong>{selectedUser.email}</strong>.\r\n            </p>\r\n            <p className=\"warning-text\">\r\n              This action cannot be undone!\r\n            </p>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"delete-confirmation\">Type user's email to confirm:</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"delete-confirmation\"\r\n                value={deleteConfirmation}\r\n                onChange={(e) => setDeleteConfirmation(e.target.value)}\r\n                placeholder={selectedUser.email}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"admin-password-delete\">Enter your password to confirm:</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"admin-password-delete\"\r\n                value={adminPassword}\r\n                onChange={(e) => setAdminPassword(e.target.value)}\r\n                placeholder=\"Your password\"\r\n              />\r\n            </div>\r\n            <div className=\"modal-actions\">\r\n              <button \r\n                onClick={handleDeleteUser}\r\n                className=\"delete-btn\"\r\n                disabled={!adminPassword || deleteConfirmation !== selectedUser.email}\r\n              >\r\n                Delete User\r\n              </button>\r\n              <button \r\n                onClick={() => {\r\n                  setShowDeleteConfirmation(false);\r\n                  setAdminPassword(\"\");\r\n                  setDeleteConfirmation(\"\");\r\n                }}\r\n                className=\"secondary-btn\"\r\n              >\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Add User Modal */}\r\n      {showAddUserModal && (\r\n        <div className=\"modal-backdrop\">\r\n          <div className=\"modal-content\">\r\n            <h3>Add New User</h3>\r\n            <form onSubmit={handleAddNewUser} className=\"user-edit-form\">\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"new-email\">Email</label>\r\n                <input\r\n                  type=\"email\"\r\n                  id=\"new-email\"\r\n                  name=\"email\"\r\n                  value={newUserData.email}\r\n                  onChange={handleNewUserInputChange}\r\n                  required\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"new-username\">Username</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"new-username\"\r\n                  name=\"username\"\r\n                  value={newUserData.username}\r\n                  onChange={handleNewUserInputChange}\r\n                  required\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"new-password\">Password</label>\r\n                <input\r\n                  type=\"text\" // Text to make it visible\r\n                  id=\"new-password\"\r\n                  name=\"password\"\r\n                  value={newUserData.password}\r\n                  onChange={handleNewUserInputChange}\r\n                  required\r\n                />\r\n                <p className=\"form-help\">\r\n                  Password must be at least 8 characters long. \r\n                  The user will be required to change this password on first login.\r\n                </p>\r\n              </div>\r\n              \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"new-role\">Role</label>\r\n                <select\r\n                  id=\"new-role\"\r\n                  name=\"role\"\r\n                  value={newUserData.role}\r\n                  onChange={handleNewUserInputChange}\r\n                >\r\n                  <option value=\"user\">User</option>\r\n                  <option value=\"admin\">Admin</option>\r\n                </select>\r\n              </div>\r\n              \r\n              <div className=\"form-actions\">\r\n                <button type=\"submit\" className=\"action-btn save-btn\">\r\n                  Create User\r\n                </button>\r\n                <button \r\n                  type=\"button\" \r\n                  className=\"action-btn password-btn\"\r\n                  onClick={() => setShowAddUserModal(false)}\r\n                >\r\n                  Cancel\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserManagement;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}